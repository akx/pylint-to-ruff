import json
import re
import subprocess
from collections.abc import Iterable

# fmt: off
implemented_rule_re = re.compile(
    r"^- \[x\] "
    r"`(?P<name>.+?)` / "
    r"`(?P<code>.+?)`"
    r"\s*"
    r"(?:\((?P<aliases>.+)\))?",
)
# fmt: on


def get_ruff_issue_970_body():
    subprocess.check_call(
        [
            "curl",
            "-fL",
            "https://api.github.com/repos/astral-sh/ruff/issues/970",
            "-o",
            "issue-970.json",
        ],
    )

    with open("issue-970.json") as f:
        content = json.load(f)["body"]
    return content


def parse_issue_body(content) -> Iterable[str, set[str]]:
    for line in content.splitlines():
        if m := implemented_rule_re.match(line):
            code = m.group("code")
            aliases = {c.strip() for c in (m.group("aliases") or "").replace("`", "").split(",") if c}
            if aliases == {f"PL{code}"}:  # not an alias really
                continue
            if not aliases:
                continue
            yield (code, aliases)


def format_sorted_set(aliases: set[str]) -> str:
    aliases_repr = repr(sorted(aliases)).removeprefix("[").removesuffix("]")
    return f"{{{aliases_repr}}}"


def main():
    content = get_ruff_issue_970_body()
    filename = "pylint_to_ruff/ruff_aliases.py"
    with open(filename, "w") as f:
        print("# This file is auto-generated by update_ruff_aliases.py", file=f)
        print("RUFF_ALIASES = {", file=f)

        for code, aliases in sorted(parse_issue_body(content)):
            print(f"    {code!r}: {format_sorted_set(aliases)},", file=f)
        print("}", file=f)
    subprocess.check_call(["ruff", "format", filename], stderr=subprocess.DEVNULL)
    print(f"Updated {f.name}")


if __name__ == "__main__":
    main()
